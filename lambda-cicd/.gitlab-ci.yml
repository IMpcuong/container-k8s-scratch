workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE == "push"

image:
  name: $REGISTRY/amazon/aws-sam-cli-build-image-python3.8:latest
  pull_policy: if-not-present

stages:
  - test
  - deploy
  - migrate

sam-validate:
  stage: test
  tags:
    - tags
  before_script:
    - sam --version
  script:
    - echo "Cannot validate the cloudformation due to the lack of connection (cloud->premise := reverse proxy!)"
  environment:
    name: $CI_COMMIT_BRANCH

.granted-perms: &granted-perms
  - stat -c "%a" ./scripts/setup-lambda-permission.sh

.granted-auth:
  stage: deploy
  before_script:
    - stat -c "%a" ./scripts/setup-authorizer-permission.sh

sam-deploy:
  stage: deploy
  image:
    name: $REGISTRY/bitnami/aws-cli:latest
    entrypoint: [""]
    pull_policy: if-not-present
  tags:
    - tags
  cache:
    - key: maven_repo
      paths:
        - .m2/repository
    - key: sam
      paths:
        - .aws-sam
  before_script:
    - !reference [.granted-auth, before_script]
    - uname -a
  script:
    - *granted-perms
    - aws --version
  environment:
    name: $CI_COMMIT_BRANCH

sync-codebase:
  stage: migrate
  image:
    name: $REGISTRY/bitnami/git:latest
    pull_policy: if-not-present
  tags:
    - tags
  variables:
    GIT_PRIV_PROJECT: "${GIT_PRIV_DOMAIN}/${PRIV_REPO}"
    PRIV_REPO_URL: "https://${GIT_USER}:${GIT_PWD}@${GIT_PRIV_PROJECT}.git"
  before_script:
    - unset http_proxy && unset https_proxy
    - git config --global user.email "${GIT_USER}@gmail.com"
    - git config --global user.name "Runner-Sync"
    - git config --global http.sslVerify false
    - mkdir -p $HOME/$PRIV_REPO/
    - echo $PRIV_REPO_URL && echo $CI_PROJECT_DIR
  script:
    - git clone -b dev ${PRIV_REPO_URL} $HOME/$PRIV_REPO/
    - cp -rf $CI_PROJECT_DIR/* $HOME/$PRIV_REPO/
    - cd $HOME/$PRIV_REPO/
    - |
      declare -x cur_stat=$(git status)
      if [[ $cur_stat == *"nothing to commit"* ]]; then
        git commit --amend --no-edit && git push -f origin $CI_COMMIT_BRANCH
      else
        git add -A . && git commit -m "$CI_COMMIT_MESSAGE ($CI_COMMIT_TIMESTAMP)"
        git push origin $CI_COMMIT_BRANCH
      fi
  environment:
    name: $CI_COMMIT_BRANCH
